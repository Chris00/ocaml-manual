\chapter{Objects in Caml} \label{c:objectexamples}

This chapter gives an overview of the object-oriented features of
Objective Caml.
%% Some commented examples introduces progressively
%% most of its features.

\subsection*{Classes and objects}

The class "point" has one instance variable "x" and two methods
"get_x" and "move". The initial value of the instance variable is
given here by the class parameter "x_init".  The variable "x" is
declared mutable, so the method "move" can change its value.
\begin{caml_example} 
class point x_init =
  val mutable x = x_init
  method get_x = x
  method move d = x <- x + d
end;;
\end{caml_example}

We now create a new point "p", giving the initialization argument~"7". 
\begin{caml_example}
let p = new point 7;;
\end{caml_example}
Note that the type of "p" is "point". This is an
abbreviation automatically defined by the class definition above. It
stands for the object type "< get_x : int; move : int -> unit>",
listing the methods of class "point" along with their types.

Let us apply some methods to "p":
\begin{caml_example}
p#get_x;;
p#move 3;;
p#get_x;;
\end{caml_example}

The library function "Oo.copy" copies an object. Its type is
"< .. > as 'a -> 'a". The keyword "as" in that type
binds the type variable "'a" to the object type "< .. >".
"Oo.copy" therefore takes an object with any methods (represented by
the ellipsis), and returns an object of the same type. The type of
"Oo.copy" is different from type "< .. > -> < .. >" as each ellipsis
represents a different set of methods. Ellipsis actually behaves as a
type variable.
\begin{caml_example}
let q = Oo.copy p;;
q#move 7; (p#get_x, q#get_x);;
\end{caml_example}

\subsection*{Inheritance}

We now define a new class "color_point". This class inherits from
class "point". So, it has all the instance variable and all the
methods of "point", plus a  new instance variable "c" and a new method
"color".
\begin{caml_example}
class color_point x (c : string) =
  inherit point x
  val c = c
  method color = c
end;;
let p' = new color_point 5 "red";;
p'#get_x, p'#color;;
\end{caml_example}

A point and a color point have incompatible types: a point has no
method "color". Thus, if one wants to put "p" and "p'"
in the same list, one needs to coerce "p'" to the type of points,
hiding its "color" method.
\begin{caml_example}
let l = [p; (p' :> point)];;
\end{caml_example}

The function "get_x" below is a generic function applying method
"get_x" to any object "p" which has this method (and
possibly some others, which are represented by an ellipsis in the
type). The method needs not be declared previously, as shown by the
companion function "set_x". Function "get_x" can then be mapped on
list~"l".
\begin{caml_example}
let get_x p = p#get_x;;
let set_x p = p#set_x;;
List.map get_x l;;
\end{caml_example}

\subsection*{Parameterized classes}

Reference cells can also be implemented as objects:
\begin{caml_example}
class ref x_init = 
  val mutable x = x_init
  method get = x
  method set y = x <- y
end;;
\end{caml_example}
The reason why this definition does not typecheck is that at least one
of the methods has a polymorphic type (here, the type of the value
stored in the reference cell), thus the class should be parametric.  A
monomorphic instance of the class could be defined by:
\begin{caml_example}
class ref (x_init:int) = 
  val mutable x = x_init
  method get = x
  method set y = x <- y
end;;
\end{caml_example}
A class for polymorphic references must  explicitly list the
type parameters in its declaration.  The type parameters must also be
bound somewhere in the class body by a type constraint. 
\begin{caml_example}
class 'a ref x_init = 
  val mutable x = (x_init : 'a)
  method get = x
  method set y = x <- y
end;;
let r = new ref 1 in r#set 2; (r#get);;
\end{caml_example}
The type parameter in the declaration may actually be constrained in the
body of the class definition. In the class type, the actual value of
the type parameter is displayed in the "constraint" clause. 
\begin{caml_example}
class 'a ref (x_init:'a) = 
  val mutable x = x_init + 1
  method get = x
  method set y = x <- y
end;;
\end{caml_example}

Let us consider a more realistic example.  We put an additional type
constraint in method "move", since no free variables must remain uncaptured
by a type parameter.
\begin{caml_example}
class 'a circle (c : 'a) =
  val mutable center = c
  method center = center
  method set_center c = center <- c
  method move = (center#move : int -> unit)
end;;
\end{caml_example}

An alternate definition of "circle", using a "constraint" clause in
the class definition, is shown below. The type "#point" used below in
the "constraint" clause is an abbreviation produced by the definition
of class "point". This abbreviation unifies with the type of any
object belonging to a subclass of class "point". It actually expands to
"< get_x : int; move : int -> unit; .. >". This leads to the following
alternate definition of "circle", which has slightly stronger
constraints on its argument, as we now expect "center" to have a
method "get_x".
\begin{caml_example}
class 'a circle (c : 'a) =
  constraint 'a = #point
  val mutable center = c
  method center = center
  method set_center c = center <- c
  method move = center#move
end;;
\end{caml_example}

The class "color_circle" is a specialized version of class
"circle" which requires the type of the center to unify with
"#color_point", and adds a method "color".
\begin{caml_example}
class 'a color_circle c =
  constraint 'a = #color_point
  inherit ('a) circle c
  method color = center#color
end;;
\end{caml_example}


\subsection*{Self reference}

A method can also send messages to the object that invoked the method. 
For that, self must be explicitly bound, 
here to the variable "s".
\begin{caml_example}
class printable_point y as s =
  inherit point y
  method print = print_int s#get_x
end;;
let p = new printable_point 7;;
p#print;;
\end{caml_example}
The variable "s" is bound at the invocation of a method. In particular, if
the class "printable_point" is inherited, the variable "s" will correctly 
be bound to an object of the subclass. 



\subsection*{Multiple inheritance}

Multiple inheritance is allowed. Only the last definition of a method
(or  of an instance variable) is kept.
But previous definitions of a method can be reused by binding the
related ancestor. Here, "super" is bound to the ancestor
"printable_point". The name "super" is not actually a variable and
can only be used to select a method as in "super#print".
\begin{caml_example}
class printable_color_point y c as self =
  inherit color_point y c
  inherit printable_point y as super
  method print =
    print_string "(";
    super#print;
    print_string ", ";
    print_string (self#color);
    print_string ")"
end;;
let p' = new printable_color_point 7 "red";;
p'#print;;
\end{caml_example}

\subsection*{Non-mutable objects}

It is possible to write a version of class "point" without assignments
on the instance variables. The construct "{< ... >}" returns a copy of
``self'' (that is, the current object), possibly changing the value of
some instance variables.
\begin{caml_example}
class functional_point y =
  val x = y
  method get_x = x
  method move d = {< x = x + d >}
end;;
let p = new functional_point 7;;
p#get_x;;
(p#move 3)#get_x;;
p#get_x;;
\end{caml_example}
Note that the type abbreviation "functional_point" is recursive, which can
be seen in the class type of "functional_point": the type of self to "'a"
and "'a" appears inside the type of the "move" method.

\subsection*{Virtual methods}

The class "comparable" below is a template for classes with a binary
method "leq" of type "'a -> bool" where the type variable
"'a" is bound to the type of self. Since this class has a method declared
but not defined, it must be flagged virtual and cannot be instantiated
(that is, no object of this class can be created). It still
defines abbreviations. In particular,
"#comparable" expands to "< leq : 'a -> bool; .. > as 'a".
We see here that the binder "as" also allows to write recursive
types.
\begin{caml_example}
class virtual comparable () : 'a =
  virtual leq : 'a -> bool
end;;
\end{caml_example}

We then defines a subclass of "comparable", which wraps integers as
comparable objects. There is a type constraint on the class parameter "x"
as the primitive "<=" is a polymorphic comparison function in
Objective Caml.  The "inherit" clause ensures that the type of objects
of this class is an instance of "#comparable".
\begin{caml_example}
class int_comparable (x : int) =
  inherit comparable ()
  val x = x
  method x = x
  method leq p = x <= p#x
end;;
\end{caml_example}

Objects of class "int_comparable2" below can also modify the integer
they hold. The status of instance variable "x" is changed. It is
now mutable and private; that is, subclasses cannot access it (it does
no longer appear in the class type). Note that the type
"int_comparable2" is not a subtype of type "int_comparable",
as the self type appears in contravariant position in the type of method
"leq".
\begin{caml_example}
class int_comparable2 x =
  inherit int_comparable x
  val private mutable x
  method set_x y = x <- y
end;;
\end{caml_example}

The function "min" will return the minimum of any two objects
whose type unify with "#comparable". The type of "min" is
not the same as "#comparable -> #comparable -> #comparable", as
the abbreviation "#comparable" hides a type variable (an
ellipsis). Each occurrence of this abbreviation generates a new
variable.
\begin{caml_example}
let min (x : #comparable) y =
  if x#leq y then x else y;;
\end{caml_example}
This function can be applied to objects of type "int_comparable"
or "int_comparable2".
\begin{caml_example}
(min (new int_comparable  7) (new int_comparable 11))#x;;
(min (new int_comparable2 5) (new int_comparable2 3))#x;;
\end{caml_example}


\subsection*{Recursive classes}

This last example is somewhat more complicated. It demonstrates
recursive classes. Indeed, lists can also be implemented by classes.
We recursively define three classes:
\begin{enumerate}
\item A virtual class "lst" implements functional over lists, here a
map method, an interation method, and a printing method. 

\item A class "nil" defines the behavior of the empty list. 

\item A class "cons" defines the behavior of non-empty lists. 

\end{enumerate}
All three classes have the same interface. 
The class "lst" depends on classes "nil" and "cons" since the "map" method
creates objets of the classes "nil" and "cons", which themselves depend on
the class "lst", since they both inherits the class "lst". 
\begin{caml_example}
class virtual 'a lst () as self =
  virtual null : bool
  virtual hd : 'a
  virtual tl : 'a lst
  method map f =
    (if self#null then
       new nil ()
     else
       new cons (f self#hd) (self#tl#map f)
     : 'a lst)
  method iter (f : 'a -> unit) =
    if self#null then ()
    else begin
      f self#hd;
      self#tl#iter f
    end
  method print (f : 'a -> unit) = 
    print_string "(";
    self#iter (fun x -> f x; print_string "::");
    print_string "[]";
    print_string ")"
and 'a nil () =
  inherit ('a) lst ()
  method null = true
  method hd   = failwith "hd"
  method tl   = failwith "tl"

and 'a cons h t =
  inherit ('a) lst ()
  val h = h val t = t
  method null = false
  method hd   = h
  method tl   = t
end;;
\end{caml_example}
It is a weakness of Objective Caml that objects
cannot have polymorphic methods: the  method "map" can
only return a list of the same type as the objet to which it applies.  
\begin{caml_example}
let l1 = new cons 3 (new cons 10 (new nil ()));;
l1#print print_int;;
let l2 = l1#map (fun x -> x + 1);;
l2#print print_int;;
\end{caml_example}
A polymorphic "map" function can still be defined:
\begin{caml_example}
let rec map_list f (x:'a lst) = 
  if x#null then new nil() 
  else new cons (f x#hd) (map_list f x#tl);;
let p1 = (map_list (fun x -> new printable_color_point x "red") l1);;
p1#print (fun x -> x#print);;
\end{caml_example}

Here are two common problems. The first one is that, in a class
definition, coercion to the type defined by this class is the
identity. The reason is that this type abbreviation is not yet
completely defined, and thus its subtypes are not clearly known. So,
for instance, the following class fails to type. Indeed, the type of
"self" is unified to the closed type "c".
\begin{caml_example}
class c () as self = method m = (self : #c :> c) end;;
\end{caml_example}
The abbreviation should first be defined by an virtual class, before
being used:
\begin{caml_example}
class virtual c () = virtual m : c end;;
class c' () as self = inherit c () method m = (self : #c :> c) end;;
\end{caml_example}
The second problem is that the coercion operator "(e :> t)" is not
always powerful enough. Here is an example:
\begin{caml_example}
class virtual c () = virtual m : c end;;
class c' () as self =
  inherit c ()
  method m = (self :> c)
  method m' = 1
end;;
\end{caml_example}
The operator type can be seen here:
\begin{caml_example}
function x -> (x :> c);;
\end{caml_example}
So, as class "c'" inherits from class "c", its method "m" has type
"c", but then according to the operator type, expression "(self :> c)
constrains this type to be also the one of "self". This fails, as "c"
has no method "m'". On the other hand, "#c = < m : c; .. >", so one
can use the more precise coercion operator:
\begin{caml_example}
class c' () as self =
  inherit c ()
  method m = (self : #c :> c)
end;;
\end{caml_example}
An alternative is to rather defines class "c" as follow (of course
this definition is not equivalent to the previous one):
\begin{caml_example}
class virtual c () : 'a = virtual m : 'a end;;
\end{caml_example}
Then a coercion operator is not even required.
\begin{caml_example}
class c' () as self =
  method m = self
  method m' = 1
end;;
\end{caml_example}
Moreover, the simple coercion operator "(e :> t)" can be used to
coerce an object of type "c'" to type "c". It is actually defined so
as to work fine with classes returning "self" without coercion.
\begin{caml_example}
(new c' () :> c);;
\end{caml_example}
