\section{Type expressions}
\pdfsection{Type expressions}

\ikwd{as\@\texttt{as}}

\begin{syntax}
typexpr:
        "'" ident
      | "_" 
      | '(' typexpr ')'
      | [['?']ident':'] typexpr '->' typexpr
      | typexpr {{ '*' typexpr }}
      | typeconstr
      | typexpr typeconstr
      | '(' typexpr { ',' typexpr } ')' typeconstr
      | typexpr 'as' "'" ident
      | '[' variant-type ']'
      | '<' ['..'] '>'
      | '<' method-type { ';' method-type } [';' '..'] '>'
      | '#' class-path
      | typexpr '#' class-path
      | '(' typexpr { ',' typexpr } ) '#' class-path
;
method-type:
    method-name ':' typexpr
;
tag-list:
    '[>' {{'`'tag-name}} ']'
\end{syntax}

The table below shows the relative precedences and associativity of
operators and non-closed type constructions. The constructions with
higher precedences come first.
\ikwd{as\@\texttt{as}}
\begin{tableau}{|l|l|}{Operator}{Associativity}
\entree{Type constructor application}{--}
\entree{"*"}{--}
\entree{"->"}{right}
\entree{"as"}{--}
\end{tableau}

Type expressions denote types in definitions of data types as well as
in type constraints over patterns and expressions.

\subsubsection*{Type variables}

The type expression @"'" ident@ stands for the type variable named
@ident@. The type expression @"_"@ stands for an anonymous type variable.
In data type definitions, type variables are names for the
data type parameters. In type constraints, they represent unspecified
types that can be instantiated by any type to satisfy the type
constraint.

\subsubsection*{Parenthesized types}

The type expression @"(" typexpr ")"@ denotes the same type as
@typexpr@.

\subsubsection*{Function types}

The type expression @typexpr_1 '->' typexpr_2@ denotes the type of
functions mapping arguments of type @typexpr_1@ to results of type
@typexpr_2@.

@label typexpr_1 '->' typexpr_2@ denotes the same function type, but
the argument is labeled @label@.

@'?'label typexpr_1 '->' typexpr_2@ denotes the type of functions
mapping an optional labeled argument of type @typexpr_1@ to results of
type @typexpr_2@. That is, the physical type of the function will be
@typexpr_1 "option" '->' typexpr_2@.

\subsubsection*{Tuple types}

The type expression @typexpr_1 '*' \ldots '*' typexpr_n@
denotes the type of tuples whose elements belong to types @typexpr_1,
\ldots typexpr_n@ respectively.

\subsubsection*{Constructed types}

Type constructors with no parameter, as in @typeconstr@, are type
expressions.

The type expression @typexpr typeconstr@, where @typeconstr@ is a type
constructor with one parameter, denotes the application of the unary type
constructor @typeconstr@ to the type @typexpr@.

The type expression @(typexpr_1,\ldots,typexpr_n) typeconstr@, where
@typeconstr@ is a type constructor with $n$ parameters, denotes the
application of the $n$-ary type constructor @typeconstr@ to the types
@typexpr_1@ through @typexpr_n@.

\subsubsection*{Recursive types}

\ikwd{as\@\texttt{as}}

The type expression @typexpr 'as' "'" ident@ denotes the same type as
@typexpr@, and also binds the type variable @ident@ to type @typexpr@ both
in @typexpr@ and in the remaining part of the type.  If the type variable
@ident@ actually occurs in @typexpr@, a recursive type is created. Recursive
types for which  there exists a recursive path that does not contain
an object type constructor are rejected. 

\subsubsection*{Variant types}

\begin{syntax}
variant-type:
        [ '|' ] tag-spec { '|' tag-spec }
      | '>' [ tag-spec ] { '|' tag-spec }
      | '<' [ '|' ] tag-spec-full { '|' tag-spec-full } [ '>' {{ '`'tag-name }} ]
;
tag-spec:
        '`'tag-name [ "of" typexpr ]
      | typexpr
;
tag-spec-full:
        '`'tag-name [ "of" typexpr ] { '&' typexpr }
      | typexpr
;
\end{syntax}

Variant types describe the values a polymorphic variant may take.

The first case is an exact variant type: all possible tags are
known, with their associated types, and they can all be present.
Its structure is fully known.

The second case is an open variant type, describing a polymorphic
variant value: it gives the list of all tags the value could take,
with their associated types. This type is still compatible with a
variant type containing more tags. A special case is the unknown
type, which does not define any tag, and is compatible with any
variant type.

The third case is a closed variant type. It gives information about
all the possible tags and their associated types, and which tags are
known to potentially appear in values. The above exact variant type is
just an abbreviation for a closed variant type where all possible tags
are also potentially present.

In all three cases, tags may be either specified directly in the
{\it `tag-name \rm [\dots]} form, or indirectly through a type
expression. In this last case, the type expression must expand to an
exact variant type, whose tag specifications are inserted in its
place.

Full specification of variant tags are only used for non-exact closed
types. They can be understood as a conjunctive type for the argument:
it is intended to have all the types enumerated in the
specification.

Such conjunctive constraints may be unsatisfiable. In such a case the
corresponding tag may not be used in a value of this type. This
does not mean that the whole type is not valid: one can still use
other available tags.

\subsubsection*{Object types}

An object type
@'<' method-type { ';' method-type } '>'@
is a record of method types.

The type @'<' method-type { ';' method-type } ';' '..'  '>'@ is the
type of an object with methods and their associated types are described by
@method-type_1, \ldots, method-type_n@, and possibly some other
methods represented by the ellipsis.  This ellipsis actually is
a special kind of type variable (also called {\em row variable} in the
literature) that stands for any number of extra method types.

\subsubsection*{\#-types}
\label{s:sharp-types}

The type @'#' class-path@ is a special kind of abbreviation. This
abbreviation unifies with the type of any object belonging to a subclass
of class @class-path@.
%
It is handled in a special way as it usually hides a type variable (an
ellipsis, representing the methods that may be added in a subclass).
In particular, it vanishes when the ellipsis gets instantiated.
%
Each type expression @'#' class-path@ defines a new type variable, so
type @'#' class-path '->' '#' class-path@ is usually not the same as
type @('#' class-path 'as' "'" ident) '->' "'" ident@.
%

Use of \#-types to abbreviate variant types is deprecated.
If "t" is an exact variant type then "#t" translates to "[< t]",
and @"#t[>" "`tag"_1 \dots"`tag"_k"]"@ translates to 
@"[<" "t" ">" "`tag"_1 \dots"`tag"_k"]"@

\subsubsection*{Variant and record types}

There are no type expressions describing (defined) variant types nor
record types, since those are always named, i.e. defined before use
and referred to by name.  Type definitions are described in
section~\ref{s:type-defs}.
