\chapter{Language extensions} \label{c:extensions}
\pdfchapter{Language extensions}

This chapter describes language extensions and convenience features
that are implemented in Objective Caml, but not described in the
Objective Caml reference manual.

\section{Integer literals for types "int32", "int64" and "nativeint"}

\begin{syntax}
int32-literal: integer-literal 'l'
;
int64-literal: integer-literal 'L'
;
nativeint-literal: integer-literal 'n'
\end{syntax}
An integer literal can be followed by one of the letters "l", "L" or "n"
to indicate that this integer has type "int32", "int64" or "nativeint"
respectively, instead of the default type "int" for integer literals.
\index{int32\@\verb`int32`}
\index{int64\@\verb`int64`}
\index{nativeint\@\verb`nativeint`}
The library modules "Int32"[\moduleref{Int32}],
"Int64"[\moduleref{Int64}] and "Nativeint"[\moduleref{Nativeint}]
provide operations on these integer types.

\section{Streams and stream parsers}
\label{s:streams}

The syntax for streams and stream parsers is no longer part of the
Objective Caml language, but available through a Camlp4 syntax
extension.  See the Camlp4 reference manual for more information.
Support for basic operations on streams is still available through the
"Stream"[\moduleref{Stream}] module of the standard library.
Objective Caml programs
that use the stream parser syntax should be compiled with the
"-pp camlp4o" option to "ocamlc" and "ocamlopt".  For interactive use,
run "ocaml" and issue the \verb'#load "camlp4o.cma";;' command.

\section{Recursive definitions of values} \label{s:letrecvalues}

As mentioned in section~\ref{s:localdef}, the @'let rec'@ binding
construct, in addition to the definition of recursive functions,
also supports a certain class of recursive definitions of
non-functional values, such as
\begin{center}
@"let" "rec" name_1 "=" "1" "::" name_2
"and" name_2 "=" "2" "::" name_1
"in" expr@
\end{center}
which binds @name_1@ to the cyclic list "1::2::1::2::"\ldots, and
@name_2@ to the cyclic list "2::1::2::1::"\ldots
Informally, the class of accepted definitions consists of those
definitions where the defined names occur only inside function
bodies or as argument to a data constructor.

More precisely, consider the expression:
\begin{center}
@"let" "rec" name_1 "=" expr_1 "and" \ldots "and" name_n "=" expr_n "in" expr@
\end{center}
It will be accepted if each one of @expr_1 \ldots expr_n@ is
statically constructive with respect to @name_1 \ldots name_n@ and
not immediately linked to any of @name_1 \ldots name_n@

An expression @@e@@ is said to be {\em statically constructive
with respect to} the variables @name_1 \ldots name_n@ if at least
one of the following conditions is true:
\begin{itemize}
\item @@e@@ has no free occurrence of any of @name_1 \ldots name_n@
\item @@e@@ is a variable
\item @@e@@ has the form @"fun" \ldots "->" \ldots@
\item @@e@@ has the form @"function" \ldots "->" \ldots@
\item @@e@@ has the form @"lazy" "(" \ldots ")"@
\item @@e@@ has one of the following forms, where each one of
  @expr_1 \ldots expr_m@ is statically constructive with respect to
  @name_1 \ldots name_n@, and @expr_0@ is statically constructive with
  respect to @name_1 \ldots name_n, xname_1 \ldots xname_m@:
  \begin{itemize}
  \item @"let" ["rec"] xname_1 "=" expr_1 "and" \ldots
         "and" xname_m "=" expr_m "in" expr_0@
  \item @"let" "module" \ldots "in" expr_1@
  \item @constr "("expr_1"," \ldots "," expr_m")"@
  \item @"`"tag-name "("expr_1"," \ldots "," expr_m")"@
  \item @"[|" expr_1";" \ldots ";" expr_m "|]"@
  \item @"{" field_1 "=" expr_1";" \ldots ";" field_m = expr_m "}"@
  \item @"{" expr_1 "with" field_2 "=" expr_2";" \ldots ";"
             field_m = expr_m "}"@ where @expr_1@ is not immediately
             linked to @name_1 \ldots name_n@
  \item @"(" expr_1"," \ldots "," expr_m ")"@
  \item @expr_1";" \ldots ";" expr_m@
  \end{itemize}
\end{itemize}

An expression @@e@@ is said to be {\em immediately linked to} the variable
@name@ in the following cases:
\begin{itemize}
\item @@e@@ is @name@
\item @@e@@ has the form @expr_1";" \ldots ";" expr_m@ where @expr_m@
   is immediately linked to @name@
\item @@e@@ has the form @"let" ["rec"] xname_1 "=" expr_1 "and" \ldots
   "and" xname_m "=" expr_m "in" expr_0@ where @expr_0@ is immediately
   linked to @name@ or to one of the @xname_i@ such that @expr_i@
   is immediately linked to @name@.
\end{itemize}

\section{Range patterns}

In patterns, Objective Caml recognizes the form
@"'" @c@ "'" ".." "'" @d@ "'"@
(two character literals separated by~"..") as shorthand for the pattern
\begin{center}
@"'" @c@ "'" "|" "'" @c@_1 "'" "|" "'" @c@_2 "'" "|" \ldots
        "|" "'" @c@_n "'" "|" "'" @d@ "'"@
\end{center}
where \nth{c}{1}, \nth{c}{2}, \ldots, \nth{c}{n} are the characters
that occur between \var{c} and \var{d} in the ASCII character set. For
instance, the pattern "'0'..'9'" matches all characters that are digits.

\section{Assertion checking}
\ikwd{assert\@\texttt{assert}}

Objective Caml supports the "assert" construct to check debugging assertions.
The expression @"assert" expr@ evaluates the expression @expr@ and
returns "()" if @expr@ evaluates to "true".  Otherwise, the exception
"Assert_failure" is raised with the source file name and the
location of @expr@ as arguments.  Assertion
checking can be turned off with the "-noassert" compiler option.

As a special case, "assert false" is reduced to
"raise (Assert_failure ...)", which is polymorphic (and
is not turned off by the "-noassert" option).
%
\index{Assertfailure\@\verb`Assert_failure`}


\section{Lazy evaluation}
\ikwd{lazy\@\texttt{lazy}}

The expression @"lazy" expr@ returns a value \var{v} of type "Lazy.t" that
encapsulates the computation of @expr@.  The argument @expr@ is not
evaluated at this point in the program.  Instead, its evaluation will
be performed the first time "Lazy.force" is applied to the value
\var{v}, returning the actual value of @expr@. Subsequent applications
of "Lazy.force" to \var{v} do not evaluate @expr@ again. Applications
of "Lazy.force" may be implicit through pattern matching.

The pattern @"lazy" pattern@ matches values \var{v} of type "Lazy.t",
provided @pattern@ matches the result of forcing \var{v} with
"Lazy.force". A successful match of a pattern containing "lazy"
sub-patterns forces the corresponding parts of the value being matched, even
those that imply no test such as @"lazy" value-name@ or @"lazy" "_"@.
Matching a value with a @pattern-matching@ where some patterns
contain "lazy" sub-patterns may imply forcing parts of the value,
even when the pattern selected in the end has no "lazy" sub-pattern.

For more information, see the description of module "Lazy" in the
standard library (see
\ifouthtml
\ahref{libref/Lazy.html}{Module \texttt{Lazy}}\else section~\ref{Lazy}\fi).
%
\index{Lazy (module)\@\verb`Lazy` (module)}%
\index{force\@\verb`force`}%

\section{Local modules}
\ikwd{let\@\texttt{let}}
\ikwd{module\@\texttt{module}}

The expression
@"let" "module" module-name "=" module-expr "in" expr@
locally binds the module expression @module-expr@ to the identifier
@module-name@ during the evaluation of the expression @expr@.
It then returns the value of @expr@.  For example:
\begin{verbatim}
        let remove_duplicates comparison_fun string_list =
          let module StringSet =
            Set.Make(struct type t = string
                            let compare = comparison_fun end) in
          StringSet.elements
            (List.fold_right StringSet.add string_list StringSet.empty)
\end{verbatim}

\section{Recursive modules} \label{s-recursive-modules}
\ikwd{module\@\texttt{module}}
\ikwd{rec\@\texttt{rec}}

\begin{syntax}
definition:
        ...
      | 'module' 'rec' module-name ':' module-type '=' module-expr \\
        { 'and' module-name':' module-type '=' module-expr }
;
specification:
        ...
      | 'module' 'rec' module-name ':' module-type
                 { 'and' module-name':' module-type }
\end{syntax}

Recursive module definitions, introduced by the 'module rec' \ldots
'and' \ldots\ construction, generalize regular module definitions
@'module' module-name '=' module-expr@ and module specifications
@'module' module-name ':' module-type@ by allowing the defining
@module-expr@ and the @module-type@ to refer recursively to the module
identifiers being defined.  A typical example of a recursive module
definition is:
\begin{verbatim}
    module rec A : sig
                     type t = Leaf of string | Node of ASet.t
                     val compare: t -> t -> int
                   end
                 = struct
                     type t = Leaf of string | Node of ASet.t
                     let compare t1 t2 =
                       match (t1, t2) with
                         (Leaf s1, Leaf s2) -> Pervasives.compare s1 s2
                       | (Leaf _, Node _) -> 1
                       | (Node _, Leaf _) -> -1
                       | (Node n1, Node n2) -> ASet.compare n1 n2
                   end
        and ASet : Set.S with type elt = A.t
                 = Set.Make(A)
\end{verbatim}
It can be given the following specification:
\begin{verbatim}
    module rec A : sig
                     type t = Leaf of string | Node of ASet.t
                     val compare: t -> t -> int
                   end
        and ASet : Set.S with type elt = A.t
\end{verbatim}

This is an experimental extension of Objective Caml: the class of
recursive definitions accepted, as well as its dynamic semantics are
not final and subject to change in future releases.

Currently, the compiler requires that all dependency cycles between
the recursively-defined module identifiers go through at least one
``safe'' module.  A module is ``safe'' if all value definitions that
it contains have function types @typexpr_1 '->' typexpr_2@.  Evaluation of a
recursive module definition proceeds by building initial values for
the safe modules involved, binding all (functional) values to
@'fun' '_' '->' 'raise' 'Undefined_recursive_module'@.  The defining
module expressions are then evaluated, and the initial values
for the safe modules are replaced by the values thus computed.  If a
function component of a safe module is applied during this computation
(which corresponds to an ill-founded recursive definition), the
"Undefined_recursive_module" exception is raised.

\section{Private types}
\ikwd{private\@\texttt{private}}

Private type declarations in module signatures, of the form 
"type t = private ...", enable libraries to
reveal some, but not all aspects of the implementation of a type to
clients of the library.  In this respect, they strike a middle ground
between abstract type declarations, where no information is revealed
on the type implementation, and data type definitions and type
abbreviations, where all aspects of the type implementation are
publicized.  Private type declarations come in three flavors: for
variant and record types (section~\ref{s-private-types-variant}),
for type abbreviations (section~\ref{s-private-types-abbrev}),
and for row types (section~\ref{s-private-rows}).

\subsection{Private variant and record types}
\label{s-private-types-variant}

\begin{syntax}
type-representation:
          ...
        | '=' 'private' constr-decl { '|' constr-decl }
        | '=' 'private' '{' field-decl { ';' field-decl } '}'
\end{syntax}
Values of a variant or record type declared "private"
can be de-structured normally in pattern-matching or via
the @expr '.' field@ notation for record accesses.  However, values of
these types cannot be constructed directly by constructor application
or record construction.  Moreover, assignment on a mutable field of a
private record type is not allowed.

The typical use of private types is in the export signature of a
module, to ensure that construction of values of the private type always
go through the functions provided by the module, while still allowing
pattern-matching outside the defining module.  For example:
\begin{verbatim}
        module M : sig
                     type t = private A | B of int
                     val a : t
                     val b : int -> t
                   end
                 = struct
                     type t = A | B of int
                     let a = A
                     let b n = assert (n > 0); B n
                   end
\end{verbatim}
Here, the "private" declaration ensures that in any value of type
"M.t", the argument to the "B" constructor is always a positive integer.

With respect to the variance of their parameters, private types are
handled like abstract types. That is, if a private type has
parameters, their variance is the one explicitly given by prefixing
the parameter by a `"+"' or a `"-"', it is invariant otherwise.

\subsection{Private type abbreviations} \label{s-private-types-abbrev}

\begin{syntax}
type-equation:
          ...
        | '=' 'private' typexpr
\end{syntax}
Unlike a regular type abbreviation, a private type abbreviation
declares a type that is distinct from its implementation type @typexpr@.
However, coercions from the type to @typexpr@ are permitted.  
Moreover, the compiler ``knows'' the implementation type and can take
advantage of this knowledge to perform type-directed optimizations.
For ambiguity reasons, @typexpr@ cannot be an object or polymorphic
variant type, but a similar behaviour can be obtained through private
row types.

The following example uses a private type abbreviation to define a
module of nonnegative integers:
\begin{verbatim}
        module N : sig
                     type t = private int
                     val of_int: int -> t
                     val to_int: t -> int
                   end
                 = struct
                     type t = int
                     let of_int n = assert (n >= 0); n
                     let to_int n = n
                   end
\end{verbatim}
The type "N.t" is incompatible with "int", ensuring that nonnegative
integers and regular integers are not confused.  However, if "x" has
type "N.t", the coercion "(x :> int)" is legal and returns the
underlying integer, just like "N.to_int x".  Deep coercions are also
supported: if "l" has type "N.t list", the coercion "(l :> int list)"
returns the list of underlying integers, like "List.map N.to_int l"
but without copying the list "l".

Note that the coercion "("@expr@" :> "@typexpr@")" is actually an abbreviated form,
and will only work in presence of private abbreviations if both the
type of @expr@ and @typexpr@ contain no type variables. If this is not the
case, you must use the full form "("@expr@" : "@@typ\_e@@" :> "@typexpr@")" where
@@typ\_e@@ is the expected type of @expr@. Concretely, this would be "(x :
N.t :> int)" and "(l : N.t list :> int list)" for the above examples.

\subsection{Private row types} \label{s-private-rows}
\ikwd{private\@\texttt{private}}

\begin{syntax}
type-equation:
          ...
        | '=' 'private' typexpr
\end{syntax}
Private row types are type abbreviations where part of the
structure of the type is left abstract. Concretely @typexpr@ in the
above should denote either an object type or a polymorphic variant
type, with some possibility of refinement left. If the private
declaration is used in an interface, the corresponding implementation
may either provide a ground instance, or a refined private type.
\begin{verbatim}
   module M : sig type c = private < x : int; .. > val o : c end =
     struct
       class c = object method x = 3 method y = 2 end
       let o = new c
     end
\end{verbatim}
This declaration does more than hiding the "y" method, it also makes
the type "c" incompatible with any other closed object type, meaning
that only "o" will be of type "c". In that respect it behaves
similarly to private record types. But private row types are
more flexible with respect to incremental refinement. This feature can
be used in combination with functors.
\begin{verbatim}
   module F(X : sig type c = private < x : int; .. > end) =
     struct
       let get_x (o : X.c) = o#x
     end
   module G(X : sig type c = private < x : int; y : int; .. > end) =
     struct
       include F(X)
       let get_y (o : X.c) = o#y
     end
\end{verbatim}

Polymorphic variant types can be refined in two ways, either to allow
the addition of new constructors, or to allow the disparition of
declared constructors. The second case corresponds to private variant
types (one cannot create a value of the private type), while the first
case requires default cases in pattern-matching to handle addition.
\begin{verbatim}
   type t = [ `A of int | `B of bool ]
   type u = private [< t > `A ]
   type v = private [> t ]
\end{verbatim}
With type "u", it is possible to create values of the form "(`A n)",
but not "(`B b)". With type "v", construction is not restricted but
pattern-matching must have a default case.

Like for abstract and private types, the variance of type parameters
is not inferred, and must be given explicitly.


\section{Local opens}
\ikwd{let\@\texttt{let}}
\ikwd{open\@\texttt{open}}

\begin{syntax}
expr:
       ...
     | "let" "open" module-path "in" expr
     | module-path '.(' expr ')'
;
\end{syntax}

The expressions
@"let" "open" module-path "in" expr@
and
@module-path.(expr)@ are strictly equivalent. They
locally open the module referred to by the module path @module-path@ in
the scope of the expression @expr@.

Restricting opening to the scope of a single expression instead of a
whole structure allows one to benefit from shorter syntax to refer to
components of the opened module, without polluting the global
scope. Also, this can make the code easier to read (the open statement is
closer to where it is used) and to refactor (because the code
fragment is more self-contained).

\section{Record notations}

\begin{syntax}
pattern:
    ...
  | '{' field ('=' pattern)? { ';' (field '=' pattern)? } ( ';' '_' )? '}'
;
expr:
     ...
  | '{' field ('=' expr)? { ';' field ('=' expr)? } '}'
  | '{' expr 'with' field ('=' expr?) { ';' field ('=' expr)? } '}'
;
\end{syntax}

In a record pattern or a record construction expression, a single
identifier @id@ stands for @id = id@, and a qualified identifier
@path ',' id@ stands for @path '.' id = id@.  For example, assuming
the record type
\begin{verbatim}
          type point = { x: float; y: float }
\end{verbatim}
has been declared, the following expressions are equivalent:
\begin{verbatim}
          let x = 1 and y = 2 in { x = x; y = y }
          let x = 1 and y = 2 in { x; y }
          let x = 1 and y = 2 in { x = x; y }
\end{verbatim}
Likewise, the following functions are equivalent:
\begin{verbatim}
          fun {x = x; y = y} -> x + y
          fun {x; y} -> x + y
\end{verbatim}

Optionally, a record pattern can be terminated by "; _" to convey the
fact that not all fields of the record type are listed in the record
pattern and that it is intentional.  By default, the compiler ignores
the "; _" annotation.  If the "R" warning is turned on, however,
the compiler will warn if a record pattern fails to list all fields of
the corresponding record type and is not terminated by "; _".
Continuing the "point" example above,
\begin{verbatim}
          fun {x} -> x + 1
\end{verbatim}
will warn if the "R" warning is on, while
\begin{verbatim}
          fun {x; _} -> x + 1
\end{verbatim}
will not warn.  This warning can help spot program points where record
patterns may need to be modified after new fields were added to a
record type.

\section{Explicit polymorphic type annotations}
\ikwd{let\@\texttt{let}}
\begin{syntax}
let-binding:
          ...
        | value-name ':' poly-typexpr '=' expr
\end{syntax}

Polymorphic type annotations in "let"-definitions behave in a way
similar to polymorphic methods: they explicitly require the defined
value to be polymorphic, and allow one to use this polymorphism in
recursive occurences (when using "let rec"). Note however that this
is just an usual polymorphic type, unifiable with any instance of
itself.

There two possible applications of this feature. One is polymorphic
recursion:
\begin{verbatim}
        type 'a t = Leaf of 'a | Node of ('a * 'a) t
        let rec depth : 'a. 'a t -> 'b = function
            Leaf _ -> 1
          | Node x -> 1 + depth x
\end{verbatim}
Note that "'b" is not explicitly polymorphic here, and it will
actually be unified with "int".

The other application is to ensure that some definition is sufficiently
polymorphic.
\caml
\?let id : 'a. 'a -> 'a = \<fun x -> x+1\> ;;
\:Error: This definition has type int -> int which is less general than
\:         'a. 'a -> 'a
\endcaml

\section{Explicit naming of type variables}
\ikwd{type\@\texttt{type}}
\ikwd{fun\@\texttt{fun}}

\begin{syntax}
parameter:
       ...
     | '(' "type" typeconstr-name ')'
;
\end{syntax}

The expression @"fun" '(' "type" typeconstr-name ')' "->" expr@ introduces a
type constructor named @typeconstr-name@ which is considered abstract
in the scope of the sub-expression, but then replaced by a fresh type
variable.  Note that contrary to what the syntax could suggest, the
expression @"fun" '(' "type" typeconstr-name ')' "->" expr@ itself does not
suspend the evaluation of @expr@ as a regular abstraction would.  The
syntax has been chosen to fit nicely in the context of function
declarations, where it is generally used. It is possible to freely mix
regular function parameters with pseudo type parameters, as in:
\begin{verbatim}
        let f = fun (type t) (foo : t list) -> ...
\end{verbatim}
and even use the alternative syntax for declaring functions:
\begin{verbatim}
        let f (type t) (foo : t list) = ...
\end{verbatim}

This construction is useful because the type constructor it introduces
can be used in places where a type variable is not allowed. For
instance, one can use it to define an exception in a local module
within a polymorphic function.
\begin{verbatim}
        let f (type t) () =
          let module M = struct exception E of t end in
          (fun x -> M.E x), (function M.E x -> Some x | _ -> None)
\end{verbatim}

Here is another example:
\begin{verbatim}
        let sort_uniq (type s) (cmp : s -> s -> int) =
          let module S = Set.Make(struct type t = s let compare = cmp end) in
          fun l ->
            S.elements (List.fold_right S.add l S.empty)
\end{verbatim}

This construction by itself does not make polymorphic the type
variable it introduces, but it can be combined with explicit
polymorphic annotations where needed. It is also extremely useful for
first-class modules.

\section{First-class modules}
\ikwd{module\@\texttt{module}}
\ikwd{val\@\texttt{val}}
\ikwd{with\@\texttt{with}}

\begin{syntax}
typexpr:
      ...
    | ('module' package-type)
;
module-expr:
      ...
    | ('val' expr ':' package-type)
;
expr:
      ...
    | ('module' module-expr ':' package-type)
;
package-type:
      modtype-path
    | modtype-path 'with' package-type-constraint { 'and' package-type-constraint }
;
package-type-constraint:
          'type' typeconstr-name '=' typexpr
;
\end{syntax}

Modules are typically thought as static components. This extension
makes it possible to pack a module as a first-class value, which can
later be dynamically unpacked into a module.

Note that package types are a subset of module type expressions. The accepted
forms are named module types with optional constraints of a limited form
(only non-parametrized types can be specified).

The new forms of expressions and module expressions turn a value of
the module language into a value of the base language and conversely.
The type of the expression @("module" module-expr ":" package-type)@
is @("module" package-type)@.

The module expression @("val" expr ":" package-type)@ cannot be used in the
body of a functor (but it can be used in a local module expression anywhere).
The type for the expression @expr@ must be @("module" package-type)@ (with the
same package type). Package types are compared by path equality on the module
type name component, and normal type equality for constraints.

With first-class modules, it is possible to parametrize some code over the
implementation of a module without using a functor. Here is an example:

\begin{verbatim}
        let sort (type s) set l =
          let module Set = (val set : Set.S with type elt = s) in
          Set.elements (List.fold_right Set.add l Set.empty)
\end{verbatim}

The type inferred for this function is "(module Set.S with type elt =
'a) -> 'a list -> 'a list". To use this function, one can wrap the "Set.Make" functor:

\begin{verbatim}
        let make_set (type s) cmp =
          let module S = Set.Make(struct
            type t = s
            let compare = cmp
          end) in
          (module S : Set.S with type elt = s) 
\end{verbatim}

This function has type "('a -> 'a -> int) -> (module Set.S with type elt = 'a)".

Another typical use of first-class module is to encode existential
types. In particular, they can be used to simulate Generalized
Algebraic Data Types. To demonstrate this, we first define a type
of witnesses for type equalities:

\begin{verbatim}
        module TypEq : sig
          type ('a, 'b) t
          val apply: ('a, 'b) t -> 'a -> 'b
          val refl: ('a, 'a) t
          val sym: ('a, 'b) t -> ('b, 'a) t
        end = struct
          type ('a, 'b) t = ('a -> 'b) * ('b -> 'a)
          let refl = (fun x -> x), (fun x -> x)
          let apply (f, _) x = f x
          let sym (f, g) = (g, f)
        end
\end{verbatim}

We can then define a paramatrized algebraic data type whose
constructors provide some information about the type parameter:

\begin{verbatim}
        module rec Typ : sig
          module type PAIR = sig
            type t and t1 and t2
            val eq: (t, t1 * t2) TypEq.t
            val t1: t1 Typ.typ
            val t2: t2 Typ.typ
          end

          type 'a typ =
            | Int of ('a, int) TypEq.t
            | String of ('a, string) TypEq.t
            | Pair of (module PAIR with type t = 'a)
        end = Typ
\end{verbatim}

Values of type "'a typ" are supposed to be runtime representations for
the type "'a". The constructors "Int" and "String" are easy: they
directly give a witness of type equality between the parameter "'a"
and the ground types "int" (resp. "string"). The constructor "Pair" is
more complex. One wants to give a witness of type equality between
"'a" and a type of the form "t1 * t2" together with the representations
for "t1" and "t2". However, these two types are unknown. The code above
should how to use first-class modules to simulate existentials.

Here is how to construct values of type "'a typ":

\begin{verbatim}
        let int = Typ.Int TypEq.refl

        let str = Typ.String TypEq.refl

        let pair (type s1) (type s2) t1 t2 =
          let module P = struct
            type t = s1 * s2
            type t1 = s1
            type t2 = s2
            let eq = TypEq.refl
            let t1 = t1
            let t2 = t2
          end in
          let pair = (module P : Typ.PAIR with type t = s1 * s2) in
          Typ.Pair pair
\end{verbatim}

And finally, here is an example of a polymorphic function that takes the
runtime representation of some type "'a" and a value of the same type,
then pretty-print the value as a string:

\begin{verbatim}
        open Typ
        let rec to_string: 'a. 'a Typ.typ -> 'a -> string =
          fun (type s) t x ->
            match t with
            | Int eq -> string_of_int (TypEq.apply eq x)
            | String eq -> Printf.sprintf "%S" (TypEq.apply eq x)
            | Pair p ->
                let module P = (val p : PAIR with type t = s) in
                let (x1, x2) = TypEq.apply P.eq x in
                Printf.sprintf "(%s,%s)" (to_string P.t1 x1) (to_string P.t2 x2)
\end{verbatim}

Note that this function uses an explicit polymorphic annotation to obtain
polymorphic recursion.

\section{Recovering the type of a module}

\ikwd{module\@\texttt{module}}
\ikwd{type\@\texttt{type}}
\ikwd{include\@\texttt{include}}

\begin{syntax}
module-type: 
     ...
   | 'module' 'type' 'of' module-expr
\end{syntax}

The construction @'module' 'type' 'of' module-expr@ expands to the module type
(signature or functor type) inferred for the module expression @module-expr@.

A typical use, in conjunction with the signature-level @'include'@
construct, is to extend the signature of an existing structure, as in
the following example.
\begin{verbatim}
        module type MYHASH = sig
          include module type of Hashtbl
          val replace: ('a, 'b) t -> 'a -> 'b -> unit
        end
\end{verbatim}
The signature "MYHASH", then, contains all the fields of the signature
of module "Hashtbl", plus the new field "replace".  An implementation
of this signature can be obtained easily, using the @'include'@
construct at the structure level this time:
\begin{verbatim}
        module MyHash : MYHASH = struct
          include Hashtbl
          let replace t k v = remove t k; add t k v
        end
\end{verbatim}

\section{Substituting inside a signature}
\ikwd{with\@\texttt{with}}
\ikwd{module\@\texttt{module}}
\ikwd{type\@\texttt{type}}

\begin{syntax}
mod-constraint:
          ...
        | 'type' [type-parameters] typeconstr-name ':=' [type-parameters] typeconstr
        | 'module' module-name ':=' extended-module-path
;
\end{syntax}

``Destructive'' substitution ("with ... :=") behaves essentially like
normal signature constraints ("with ... ="), but it additionally removes
the redefined type or module from the signature. There are a number of
restrictions: one can only remove types and modules at the outermost
level (not inside submodules), and the definition must be either
another type constructor (with identical type parameters), or a module
path.

A natural application of destructive substitution is merging two
signatures sharing a type name.
\begin{verbatim}
        module type Printable = sig
          type t
          val print : Format.formatter -> t -> unit
        end
        module type Comparable = sig
          type t
          val compare : t -> t -> int
        end
        module type PrintableComparable = sig
          include Printable
          include Comparable with type t := t
        end
\end{verbatim}

One can also use this to completely remove a field:
\caml
\?module type S = Comparable with type t := int;;
\:module type S = sig val compare : int -> int -> int end
\endcaml
or to rename one:
\caml
\?module type S = sig
\?  type u
\?  include Comparable with type t := u
\?end;;
\:module type S = sig type u val compare : u -> u -> int end
\endcaml

Note that you can also remove manifest types, by substituting with the
same type.
\caml
\?module type ComparableInt = Comparable with type t = int
\:module type ComparableInt = sig type t = int val compare : t -> t -> int end
\?module type CompareInt = ComparableInt with type t := int ;;
\:module type CompareInt = sig val compare : int -> int -> int end
\endcaml
