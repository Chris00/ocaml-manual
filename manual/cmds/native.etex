\chapter{Native-code compilation (ocamlopt)} \label{c:nativecomp}
\pdfchapter{Native-code compilation (ocamlopt)}

This chapter describes the Objective Caml high-performance
native-code compiler "ocamlopt", which compiles Caml source files to
native code object files and link these object files to produce
standalone executables. 

The native-code compiler is only available on certain platforms.
It produces code that runs faster than the bytecode produced by
"ocamlc", at the cost of increased compilation time and executable code
size. Compatibility with the bytecode compiler is extremely high: the
same source code should run identically when compiled with "ocamlc" and
"ocamlopt".

It is not possible to mix native-code object files produced by "ocamlc"
with bytecode object files produced by "ocamlopt": a program must be
compiled entirely with "ocamlopt" or entirely with "ocamlc". Native-code
object files produced by "ocamlopt" cannot be loaded in the toplevel
system "ocaml".

\section{Overview of the compiler}

The "ocamlopt" command has a command-line interface very close to that
of "ocamlc". It accepts the same types of arguments:

\begin{itemize}
\item
Arguments ending in ".mli" are taken to be source files for
compilation unit interfaces. Interfaces specify the names exported by
compilation units: they declare value names with their types, define
public data types, declare abstract data types, and so on. From the
file \var{x}".mli", the "ocamlopt" compiler produces a compiled interface
in the file \var{x}".cmi". The interface produced is identical to that
produced by the bytecode compiler "ocamlc".

\item
Arguments ending in ".ml" are taken to be source files for compilation
unit implementations. Implementations provide definitions for the
names exported by the unit, and also contain expressions to be
evaluated for their side-effects.  From the file \var{x}".ml", the "ocamlopt"
compiler produces two files: \var{x}".o", containing native object code,
and \var{x}".cmx", containing extra information for linking and
optimization of the clients of the unit. The compiled implementation
should always be referred to under the name \var{x}".cmx" (when given
a ".o" file, "ocamlopt" assumes that it contains code compiled from C,
not from Caml).

The implementation is checked against the interface file \var{x}".mli"
(if it exists) as described in the manual for "ocamlc"
(chapter~\ref{c:camlc}).

\item
Arguments ending in ".cmx" are taken to be compiled object code.  These
files are linked together, along with the object files obtained
by compiling ".ml" arguments (if any), and the Caml standard
library, to produce a native-code executable program. The order in
which ".cmx" and ".ml" arguments are presented on the command line is
relevant: compilation units are initialized in that order at
run-time, and it is a link-time error to use a component of a unit
before having initialized it. Hence, a given \var{x}".cmx" file must come
before all ".cmx" files that refer to the unit \var{x}.

\item
Arguments ending in ".cmxa" are taken to be libraries of object code.
Such a library packs in two files (\var{lib}".cmxa" and \var{lib}".a")
a set of object files (".cmx"/".o" files). Libraries are build with
"ocamlopt -a" (see the description of the "-a" option below). The object
files contained in the library are linked as regular ".cmx" files (see
above), in the order specified when the library was built. The only
difference is that if an object file contained in a library is not
referenced anywhere in the program, then it is not linked in.

\item
Arguments ending in ".c" are passed to the C compiler, which generates
a ".o" object file. This object file is linked with the program.

\item
Arguments ending in ".o", ".a" or ".so" (".obj", ".lib" and ".dll"
under Windows) are assumed to be C object files and
libraries. They are linked with the program.

\end{itemize}

The output of the linking phase is a regular Unix executable file. It
does not need "ocamlrun" to run.

\section{Options}

The following command-line options are recognized by "ocamlopt".

\begin{options}

\item["-a"]
Build a library (".cmxa"/".a" file) with the object files (".cmx"/".o"
files) given on the command line, instead of linking them into an
executable file. The name of the library can be set with the "-o"
option. The default name is "library.cmxa".

If "-cclib" or "-ccopt" options are passed on the command
line, these options are stored in the resulting ".cmxa" library.  Then,
linking with this library automatically adds back the 
"-cclib" and "-ccopt" options as if they had been provided on the
command line, unless the "-noautolink" option is given.

\item["-c"]
Compile only. Suppress the linking phase of the
compilation. Source code files are turned into compiled files, but no
executable file is produced. This option is useful to
compile modules separately.

\item["-cc" \var{ccomp}]
Use \var{ccomp} as the C linker called to build the final executable
and as the C compiler for compiling ".c" source files.

\item["-cclib" "-l"\var{libname}]
Pass the "-l"\var{libname} option to the linker. This causes the given
C library to be linked with the program.

\item["-ccopt" \var{option}]
Pass the given option to the C compiler and linker. For instance,
"-ccopt -L"\var{dir} causes the C linker to search for C libraries in
directory \var{dir}.

\item["-compact"]
Optimize the produced code for space rather than for time. This
results in slightly smaller but slightly slower programs. The default is to
optimize for speed.

\item["-dtypes"]
Dump detailed type information.  The information for file \var{x}".ml"
is put into file \var{x}".annot".  In case of a type error, dump
all the information inferred by the type-checker before the error.
The \var{x}".annot" file can be used with the emacs commands given in
"emacs/caml-types.el" to display types interactively.

\item["-i"]
Cause the compiler to print all defined names (with their inferred
types or their definitions) when compiling an implementation (".ml"
file).  No compiled files (".cmo" and ".cmi" files) are produced.
This can be useful to check the types inferred by the
compiler. Also, since the output follows the syntax of interfaces, it
can help in writing an explicit interface (".mli" file) for a file:
just redirect the standard output of the compiler to a ".mli" file,
and edit that file to remove all declarations of unexported names.

\item["-I" \var{directory}]
Add the given directory to the list of directories searched for
compiled interface files (".cmi"), compiled object code files
(".cmx"), and libraries (".cmxa"). By default, the current directory
is searched first, then the standard library directory. Directories
added with "-I" are searched after the current directory, in the order
in which they were given on the command line, but before the standard
library directory.

If the given directory starts with "+", it is taken relative to the
standard library directory.  For instance, "-I +labltk" adds the
subdirectory "labltk" of the standard library to the search path.

\item["-inline" \var{n}]
Set aggressiveness of inlining to \var{n}, where \var{n} is a positive
integer. Specifying "-inline 0" prevents all functions from being
inlined, except those whose body is smaller than the call site. Thus,
inlining causes no expansion in code size. The default aggressiveness,
"-inline 1", allows slightly larger functions to be inlined, resulting
in a slight expansion in code size. Higher values for the "-inline"
option cause larger and larger functions to become candidate for
inlining, but can result in a serious increase in code size.

\item["-linkall"]
Forces all modules contained in libraries to be linked in. If this
flag is not given, unreferenced modules are not linked in. When
building a library ("-a" flag), setting the "-linkall" flag forces all
subsequent links of programs involving that library to link all the
modules contained in the library.

\item["-noassert"]
Turn assertion checking off: assertions are not compiled.
This flag has no effect when linking already compiled files.

\item["-noautolink"]
When linking ".cmxa" libraries, ignore "-cclib" and "-ccopt"
options potentially contained in the libraries (if these options were
given when building the libraries).  This can be useful if a library
contains incorrect specifications of C libraries or C options; in this
case, during linking, set "-noautolink" and pass the correct C
libraries and options on the command line.

\item["-nolabels"]
Ignore non-optional labels in types. Labels cannot be used in
applications, and parameter order becomes strict.

\item["-o" \var{exec-file}]
Specify the name of the output file produced by the linker. The
default output name is "a.out", in keeping with the Unix tradition. If
the "-a" option is given, specify the name of the library produced.
If the "-output-obj" option is given, specify the name of the output
file produced.

\item["-output-obj"]
Cause the linker to produce a C object file instead of an executable
file. This is useful to wrap Caml code as a C library,
callable from any C program. See chapter~\ref{c:intf-c},
section~\ref{s:embedded-code}. The name of the output object file is
"camlprog.o" by default; it can be set with the "-o" option.

\item["-p"]
Generate extra code to write profile information when the program is
executed.  The profile information can then be examined with the
analysis program "gprof".  (See chapter~\ref{c:profiler} for more
information on profiling.)  The "-p" option must be given both at
compile-time and at link-time.  Linking object files not compiled with
"-p" is possible, but results in less precise profiling.

\begin{unix} See the Unix manual page for "gprof(1)" for more
information about the profiles.

Full support for "gprof" is only available for certain platforms
(currently: Intel x86/Linux and Alpha/Digital Unix).
On other platforms, the "-p" option will result in a less precise
profile (no call graph information, only a time profile).
\end{unix}

\begin{windows}
The "-p" option does not work under Windows.
\end{windows}

\item["-pack"]
Build an object file (".cmx"/".o" file) and its associated compiled
interface (".cmi") that combines the ".cmx" object
files given on the command line, making them appear as sub-modules of
the output ".cmx" file.  The name of the output ".cmx" file must be
given with the "-o" option.  For instance,
\begin{verbatim}
        ocamlopt -pack -o p.cmx a.cmx b.cmx c.cmx
\end{verbatim}
generates compiled files "p.cmx", "p.o" and "p.cmi" describing a
compilation unit having three sub-modules "A", "B" and "C",
corresponding to the contents of the object files "a.cmx", "b.cmx" and
"c.cmx".  These contents can be referenced as "P.A", "P.B" and "P.C"
in the remainder of the program.

\begin{unix} The "-pack" option is available only under platforms that
provide the GNU Binutils tools "nm" and "objcopy".
\end{unix}

\item["-pp" \var{command}]
Cause the compiler to call the given \var{command} as a preprocessor
for each source file. The output of \var{command} is redirected to
an intermediate file, which is compiled. If there are no compilation
errors, the intermediate file is deleted afterwards. The name of this
file is built from the basename of the source file with the extension
".ppi" for an interface (".mli") file and ".ppo" for an implementation
(".ml") file.

\item["-principal"]
Check information path during type-checking, to make sure that all
types are derived in a principal way. All programs accepted in
"-principal" mode are also accepted in default mode with equivalent
types, but different binary signatures.

\item["-rectypes"]
Allow arbitrary recursive types during type-checking.  By default,
only recursive types where the recursion goes through an object type
are supported.

\item["-S"]
Keep the assembly code produced during the compilation. The assembly
code for the source file \var{x}".ml" is saved in the file \var{x}".s".

\item["-thread"]
Compile or link multithreaded programs, in combination with the
system "threads" library described in chapter~\ref{c:threads}.

\item["-unsafe"]
Turn bound checking off on array and string accesses (the "v.(i)" and
"s.[i]" constructs). Programs compiled with "-unsafe" are therefore
faster, but unsafe: anything can happen if the program accesses an
array or string outside of its bounds.

\item["-v"]
Print the version number of the compiler and the location of the
standard library directory, then exit.

\item["-verbose"]
Print all external commands before they are executed, in particular
invocations of the assembler, C compiler, and linker.

\item["-version"]
Print the version number of the compiler in short form (e.g. "3.06"),
then exit.

\item["-w" \var{warning-list}]
Enable or disable warnings according to the argument
\var{warning-list}.  The argument is a string of one or several
characters, with the following meaning for each character:
\begin{options}
\item["A"/"a"] enable/disable all warnings.
\item["C"/"c"] enable/disable warnings for suspicious comments.
\item["D"/"d"] enable/disable warnings for deprecated features.
\item["F"/"f"] enable/disable warnings for partially applied functions
(i.e. "f x; "\var{expr} where the application "f x" has a function type).
\item["L"/"l"] enable/disable warnings for labels omitted in application.
\item["M"/"m"] enable/disable warnings for overriden methods.
\item["P"/"p"] enable/disable warnings for partial matches (missing cases
in pattern matchings).
\item["S"/"s"] enable/disable warnings for statements that do not have
type "unit" (e.g. \var{expr1}"; "\var{expr2} when \var{expr1} does not
have type "unit").
\item["U"/"u"] enable/disable warnings for unused (redundant) match cases.
\item["V"/"v"] enable/disable warnings for hidden instance variables.
\item["X"/"x"] enable/disable all other warnings.
\end{options}
The default setting is "-w Al" (all warnings but labels enabled).

\item["-warn-error" \var{warning-list}]
Turn the warnings indicated in the argument \var{warning-list} into
errors.  The compiler will stop on an error as soon as one of these
warnings is emitted, instead of going on.  The \var{warning-list}
is a string of one or several characters, with the same meaning as for
the "-w" option: an uppercase character turns the corresponding
warning into an error, a lowercase character leaves it as a warning.
The default setting is "-warn-error a" (all warnings are not treated
as errors).

\item["-where"]
Print the location of the standard library.
%
\end{options}

\paragraph{Options for the IA32 architecture}
The IA32 code generator (Intel Pentium, AMD Athlon) supports the
following additional option:

\begin{options}
\item["-ffast-math"] Use the IA32 instructions to compute
trigonometric and exponential functions, instead of calling the
corresponding library routines.  The functions affected are:
"atan", "atan2", "cos", "log", "log10", "sin", "sqrt", and "tan".
The resulting code runs faster, but the range of supported arguments
and the precision of the result can be reduced.  In particular,
trigonometric operations "cos", "sin", "tan" have their range reduced to
$[-2^{64}, 2^{64}]$.
\end{options}

\paragraph{Options for the Sparc architecture}
The Sparc code generator supports the following additional options:
\begin{options}
\item["-march=v8"] Generate SPARC version 8 code.
\item["-march=v9"] Generate SPARC version 9 code.
\end{options}
The default is to generate code for SPARC version 7, which runs on all
SPARC processors.

\paragraph{Environment variables}
The following environment variable is also consulted:
\begin{options}
\item["OCAMLRUNPARAM"]  Same usage as in "ocamlrun"
  (see section~\ref{ocamlrun-options}), except that option "l"
  is ignored (the operating system's stack size limit
  is used instead).
\item["CAMLRUNPARAM"]  Same as in "ocamlrun".
\end{options}

\section{Common errors}

The error messages are almost identical to those of "ocamlc".
See section~\ref{s:comp-errors}.

\section{Compatibility with the bytecode compiler}
\label{s:compat-native-bytecode}

This section lists the known incompatibilities between the bytecode
compiler and the native-code compiler. Except on those points, the two
compilers should generate code that behave identically.

\begin{itemize}

\item The following operations abort the program (via an hardware trap
or fatal Unix signal) instead of raising an exception:
\begin{itemize}
\item integer division by zero, modulus by zero;
\item stack overflow (except on the IA32 architecture);
\item on the Alpha processor only, floating-point operations involving
infinite or denormalized numbers (all other processors supported by
"ocamlopt" treat these numbers correctly, as per the IEEE 754 standard).
\end{itemize}
In particular, notice that stack overflow caused by excessively deep
recursion is reported by most Unix kernels as a ``segmentation
violation'' signal.

\item Signals are detected only when the program performs an
allocation in the heap. That is, if a signal is delivered while in a
piece of code that does not allocate, its handler will not be called
until the next heap allocation.

\item The exception raised by an out-of-bounds array or string
access is not the same.  Currently, in bytecode it is
"Invalid_argument(\"Array.get\")"
or "Invalid_argument(\"String.set\")", while in native code it
is "Invalid_argument(\"out-of-bound array or string access\")".

\end{itemize}

The best way to avoid running into those incompatibilities is to {\em
never} trap the "Division_by_zero", "Stack_overflow" and
"Invalid_argument(\"Array.get\")" exceptions, thus treating them
as fatal errors both with the bytecode compiler and with the
native-code compiler. Often, it is easy to test the divisor or the
array bounds before performing the operation, instead of trapping the
exception afterwards.
