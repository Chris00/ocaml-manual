\chapter{Profiling (ocamlprof)} \label{c:profiler}
\pdfchapter{Profiling (ocamlprof)}

This chapter describes how the execution of Objective Caml
programs can be profiled, by recording how many times functions are
called, branches of conditionals are taken, \ldots 

\section{Compiling for profiling}

Before profiling an execution, the program must be compiled in
profiling mode, using the "ocamlcp" front-end to the "ocamlc" compiler
(see chapter~\ref{c:camlc}). When compiling modules separately,
"ocamlcp" must be used when compiling the modules (production
of ".cmo" files), and can also be used (though this is not strictly
necessary) when linking them together.

To make sure your programs can be compiled in profiling mode, avoid
using any identifier that begins with "__ocaml_prof".

The amount of profiling information can be controlled through the "-p"
option to "ocamlcp", followed by one or several letters indicating which
parts of the program should be profiled:

%% description des options
\begin{options}
\item["a"] all options
\item["f"] function calls : a count point is set at the beginning of
function bodies
\item["i"] {\bf if \ldots then \ldots else \ldots} : count points are set in
both {\bf then} branch and {\bf else} branch
\item["l"] {\bf while, for} loops: a count point is set at the beginning of
the loop body
\item["m"] {\bf match} branches: a count point is set at the beginning of the
body of each branch
\item["t"] {\bf try \ldots with \ldots} branches: a count point is set at the
beginning of the body of each branch
\end{options}

For instance, compiling with "ocamlcp -p film" profiles function calls,
if\ldots then\ldots else\ldots, loops and pattern matching.

Calling "ocamlcp" without the "-p" option defaults to "-p fm", meaning
that only function calls and pattern matching are profiled.

{\bf Warning:} Although it is possible to use profiling and the
"-thread" option together, in most cases the combination prevents
tail-call optimisations.  As a result, some programs may fail with a
"Stack_overflow" exception.

\section{Profiling an execution}

Running a bytecode executable file that has been compiled with "ocamlcp"
records the execution counts for the specified parts of the program
and saves them in a file called "ocamlprof.dump" in the current directory.

The "ocamlprof.dump" file is written only if the program terminates
normally (by calling "exit" or by falling through). It is not written
if the program terminates with an "uncaught exception".

If a compatible dump file already exists in the current directory, then the
profiling information is accumulated in this dump file. This allows, for
instance, the profiling of several executions of a program on
different inputs.

\section{Printing profiling information}

The "ocamlprof" command produces a source listing of the program modules
where execution counts have been inserted as comments. For instance,
\begin{verbatim}
        ocamlprof foo.ml
\end{verbatim}
prints the source code for the "foo" module, with comments indicating
how many times the functions in this module have been called. Naturally,
this information is accurate only if the source file has not been modified
since the profiling execution took place.

The following options are recognized by "ocamlprof":

\begin{options}
\item["-f" \var{dumpfile}] 
Specifies an alternate dump file of profiling information
\item["-F" \var{string}]
Specifies an additional string to be output with profiling information.
By default, "ocamlprof" will annotate programs with comments of the form
{\tt (* {\it n} *)} where {\it n} is the counter value for a profiling
point. With option {\tt -F s}, the annotation will be {\tt (* {\it s n} *)}.
\end{options}

\section{Time profiling}

Profiling with "ocamlprof" only records execution counts, not the actual
time spent into each function. There is currently no way to perform
time profiling on bytecode programs generated by "ocamlc".

Native-code programs generated by "ocamlopt" can be profiled for time
and execution counts using the "-p" option and the standard Unix
profiler "gprof".  Just add the "-p" option when compiling and linking
the program:
\begin{alltt}
        ocamlopt -o myprog -p \var{other-options} \var{files}
        ./myprog
        gprof myprog
\end{alltt}
Caml function names in the output of "gprof" have the following format:
\begin{alltt}
        \var{Module-name}_\var{function-name}_\var{unique-number}
\end{alltt}
Other functions shown are either parts of the Caml run-time system or
external C functions linked with the program.

The output of "gprof" is described in the Unix manual page for
"gprof(1)".  It generally consists of two parts: a ``flat'' profile
showing the time spent in each function and the number of invocation
of each function, and a ``hierarchical'' profile based on the call
graph.  Currently, only the Intel x86/Linux and Alpha/Digital Unix
ports of "ocamlopt" support the two profiles.  On other platforms,
"gprof" will report only the ``flat'' profile with just time
information.  When reading the output of "gprof", keep in mind that
the accumulated times computed by "gprof" are based on heuristics and
may not be exact.
