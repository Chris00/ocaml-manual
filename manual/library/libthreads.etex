\chapter{The threads library}
\label{c:threads}
\pdfchapterfold{-5}{The threads library}

The "threads" library allows concurrent programming in Objective Caml.
It provides multiple threads of control (also called lightweight
processes) that execute concurrently in the same memory space. Threads
communicate by in-place modification of shared data structures, or by
sending and receiving data on communication channels.

The "threads" library is implemented by time-sharing on a single
processor. It will not take advantage of multi-processor machines.
Using this library will therefore never make programs run
faster. However, many programs are easier to write when structured as
several communicating processes.

\begin{unix}
Programs that use the "threads" library must be linked as follows:
\begin{alltt}
        ocamlc -thread \var{other options} threads.cma \var{other files}
\end{alltt}
The "-thread" option selects a special, thread-safe version of
the standard library (see chapter~\ref{c:camlc}).  The "-thread"
option must also be given when compiling any source file that
references modules from the thread library ("Thread", "Mutex", \ldots).

The default thread implementation cannot be used in native-code
programs compiled with "ocamlopt".  If your operating system provides
POSIX 1003.1c compliant threads, you can select an alternate
implementation when configuring Objective Caml (use the
"-with-pthread" option to "configure") which also supports native-code
programs.  Programs that use this alternate implementation of the
"threads" library must be linked as follows:
\begin{alltt}
        ocamlc -thread \var{other options} threads.cma \var{other files}
        ocamlopt -thread \var{other options} threads.cmxa \var{other files}
\end{alltt}
Depending on the operating system, extra system libraries can be
necessary.  For instance, under Solaris 2.5, add "-cclib -lposix4"
at the end of the command line.
\end{unix}

\begin{windows}
Programs that use the "threads" library must be linked as follows:
\begin{alltt}
        ocamlc -thread \var{other options} threads.cma \var{other files}
\end{alltt}
All object files on the command line must also have been compiled with
the "-thread" option, which selects a special, thread-safe version of
the standard library (see chapter~\ref{c:camlc}).
\end{windows}

\begin{rawhtml}
<ul>
<li><a HREF=libref/Thread.html> Module <tt>Thread</tt>: lightweight threads</a></li>
<li><a HREF=libref/Mutex.html> Module <tt>Mutex</tt>: locks for mutual exclusion</a></li>
<li><a HREF=libref/Condition.html> Module <tt>Condition</tt>: condition variables to synchronize between threads</a></li>
<li><a HREF=libref/Event.html> Module <tt>Event</tt>: first-class synchronous communication</a></li>
<li><a HREF=libref/ThreadUnix.html> Module <tt>ThreadUnix</tt>: thread-compatible system calls</a></li>
</ul>
\end{rawhtml}
%BEGIN LATEX
\input{Thread.tex}
\input{Mutex.tex}
\input{Condition.tex}
\input{Event.tex}
\input{ThreadUnix.tex}
%END LATEX
