\chapter{The threads library}
\label{c:threads}

The "threads" library allows concurrent programming in Objective Caml.
It provides multiple threads of control (also called lightweight
processes) that execute concurrently in the same memory space. Threads
communicate by in-place modification of shared data structures, or by
sending and receiving data on communication channels.

The "threads" library is implemented by time-sharing on a single
processor. It will not take advantage of multi-processor machines.
Using this library will therefore never make programs run
faster. However, many programs are easier to write when structured as
several communicating processes.

This library cannot be used in native-code programs compiled with
"ocamlopt"; it can only be used with bytecode programs
compiled with "ocamlc".

\begin{unix}
Programs that use the "threads" library must be linked as follows:
\begin{alltt}
        ocamlc -thread -custom \var{other options} threads.cma \var{other files} -cclib -lthreads
\end{alltt}
All object files on the command line must also have been compiled with
the "-thread" option, which selects a special, thread-safe version of
the standard library (see chapter~\ref{c:camlc}).
\end{unix}

\begin{windows}
Programs that use the "threads" library must be linked as follows:
\begin{alltt}
        ocamlc -thread -custom \var{other options} threads.cma \var{other files} \%CAMLLIB\%/libthreads.lib
\end{alltt}
All object files on the command line must also have been compiled with
the "-thread" option, which selects a special, thread-safe version of
the standard library (see chapter~\ref{c:camlc}).
\end{windows}

Interactive use through a toplevel built with "ocamlmktop" is
impractical, because the Objective Caml toplevel itself is not
thread-aware.

\begin{library}
\input thread.tex
\input mutex.tex
\input condition.tex
\input event.tex
\input threadUnix.tex
\end{library}
