\chapter{The unix library: Unix system calls}
\pdfchapterfold{-1}{The unix library: Unix system calls}

The "unix" library makes many Unix
system calls and system-related library functions available to
Objective Caml programs. This chapter describes briefly the functions
provided.  Refer to sections 2~and~3 of the Unix manual for more
details on the behavior of these functions.

Not all functions are provided by all Unix variants. If some functions
are not available, they will raise "Invalid_arg" when called.

Programs that use the "unix" library must be linked as follows:
\begin{alltt}
        ocamlc \var{other options} unix.cma \var{other files}
        ocamlopt \var{other options} unix.cmxa \var{other files}
\end{alltt}
For interactive use of the "unix" library, do:
\begin{alltt}
        ocamlmktop -o mytop unix.cma
        ./mytop
\end{alltt}
or (if dynamic linking of C libraries is supported on your platform),
start "ocaml" and type "#load \"unix.cma\";;".

\begin{macos}
A fairly complete emulation of the Unix system calls is provided in
the MacOS version of Objective Caml. The end of this chapter gives
more information on the functions that are not supported under MacOS.
\end{macos}

\begin{windows}
A fairly complete emulation of the Unix system calls is provided in
the Windows version of Objective Caml. The end of this chapter gives
more information on the functions that are not supported under Windows.
\end{windows}

\begin{library}
\input{Unix.tex}
\end{library}

\section{Module "UnixLabels": labelized version of the interface}
\label{UnixLabels}
\index{UnixLabels (module)@\verb~UnixLabels~ (module)}%
\pdfsection{Module UnixLabels: labelized version of the interface}

This module is identical to "Unix"~(\ref{Unix}), and only differs by
the addition of labels. You may see these labels directly by looking
at "unixLabels.mli", or by using the "ocamlbrowser" tool.

\newpage
\begin{macos}
Under MacOS, the Unix library is only available in the toplevel
application, not in MPW tools.
Below is a list of the functions that are not implemented, or only
partially implemented, under MacOS. Functions not mentioned are
fully implemented and behave as described previously in this chapter.

\begin{tableau}{|l|p{8cm}|}{Functions}{Comment}
\entree{"chown", "fchown"}{not implemented}
\entree{"chroot"}{not implemented}
\entree{"environment", "putenv"}{not implemented}
\entree{"execv", "execve", "execvp", "execvpe"}{not implemented}
\entree{"fork"}{not implemented, use threads}
\entree{"getegid", "geteuid", "getgid", "getuid"}{always return 1}
\entree{"getgrnam", "getgrgid"}{not implemented}
\entree{"getlogin"}{returns the user name as set in the Internet control panel}
\entree{"getpid"}{returns the low-order 31 bits of the PSN}
\entree{"getppid"}{not implemented}
\entree{"getpwnam", "getpwuid"}{not implemented}
\entree{"kill"}{not implemented}
\entree{"link"}{not implemented}
\entree{"mkfifo"}{not implemented}
\entree{"nice"}{not implemented}
\entree{"setgid", "setuid"}{not implemented}
\entree{"times"}{only the process user time is returned}
\entree{"umask"}{not implemented}
\entree{"wait"}{not implemented}
\entree{"waitpid"}{not implemented}
\entree{"establish_server"}{not implemented; use threads}
\entree{terminal functions ("tc*")}{not implemented}
\end{tableau}

\end{macos}

\newpage
\begin{windows}
The Cygwin port of Objective Caml fully implements all functions from
the Unix module.  The native Win32 port implements a subset of them.
Below is a list of the functions that are not implemented, or only
partially implemented, by the Win32 port. Functions not mentioned are
fully implemented and behave as described previously in this chapter.

\begin{tableau}{|l|p{8cm}|}{Functions}{Comment}
\entree{"fork"}{not implemented, use "create_process" or threads}
\entree{"wait"}{not implemented, use "waitpid"}
\entree{"waitpid"}{can only wait for a given PID, not any child process}
\entree{"getppid"}{not implemented (meaningless under Windows)}
\entree{"nice"}{not implemented}
\entree{"in_channel_of_descr"}{does not work on sockets under Windows
95, 98, ME; works fine under NT and 2000}
\entree{"out_channel_of_descr"}{ditto}
\entree{"truncate", "ftruncate"}{not implemented}
\entree{"lstat", "fstat"}{not implemented}
\entree{"link", "symlink", "readlink"}{not implemented (no links under
Windows)}
\entree{"fchmod"}{not implemented}
\entree{"chown", "fchown"}{not implemented (make no sense on a DOS
file system)}
\entree{"umask"}{not implemented}
\entree{"set_nonblock", "clear_nonblock"}{implemented as dummy
functions; use threads instead of non-blocking I/O}
\entree{"rewinddir"}{not implemented; re-open the directory instead}
\entree{"mkfifo"}{not implemented}
\entree{"select"}{implemented, but works only for sockets; use threads
                  if you need to wait on other kinds of file descriptors}
\entree{"lockf"}{not implemented}
\entree{"kill", "pause"}{not implemented (no inter-process signals in Windows)}
\entree{"alarm", "times"}{not implemented}
\entree{"getitimer", "setitimer"}{not implemented}
\entree{"getuid", "getgid"}{always return 1}
\entree{"getgid", "getegid", "getgroups"}{not implemented}
\entree{"setuid", "setgid"}{not implemented}
\entree{"getpwnam", "getpwuid"}{always raise "Not_found"}
\entree{"getgrnam", "getgrgid"}{always raise "Not_found"}
\entree{type "socket_domain"}{the domain "PF_UNIX" is not supported;
"PF_INET" is fully supported}
\entree{"establish_server"}{not implemented; use threads}
\entree{terminal functions ("tc*")}{not implemented}
\end{tableau}

\end{windows}
