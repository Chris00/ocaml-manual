\chapter{The standard library}

This chapter describes the functions provided by the Caml Light
standard library. The modules from the standard library are
automatically linked with the user's object code files by the "ocamlc"
command. Hence, these modules can be used in standalone programs without
having to add any ".cmo" file on the command line for the linking
phase. Similarly, in interactive use, these globals can be used in
toplevel phrases without having to load any ".cmo" file in memory.

Unlike the "Pervasive" module from the core library, the modules from the
standard library are not automatically ``opened'' when a compilation
starts, or when the toplevel system is launched. Hence it is necessary
to use qualified identifiers to refer to the functions provided by these
modules, or to add "open" directives.

\section*{Conventions}

For easy reference, the modules are listed below in alphabetical order
of module names.
For each module, the declarations from its signature are printed
one by one in typewriter font, followed by a short comment.
All modules and the identifiers they export are indexed at the end of
this report.

\begin{latexonly}
\section*{Overview}

Here is a short listing, by theme, of the standard library modules.

\subsubsection*{Data structures:}
\begin{tabular}{lll}
"Char" & p.~\pageref{s:Char} & character operations \\
"String" & p.~\pageref{s:String} & string operations \\
"Array" & p.~\pageref{s:Array} & array operations \\
"List" & p.~\pageref{s:List} & list operations \\
"Sort" & p.~\pageref{s:Sort} & sorting and merging lists \\
"Hashtbl" & p.~\pageref{s:Hashtbl} & hash tables and hash functions \\
"Random" & p.~\pageref{s:Random} & pseudo-random number generator \\
"Set" & p.~\pageref{s:Set} & sets over ordered types \\
"Map" & p.~\pageref{s:Map} & association tables over ordered types \\
"Oo" & p.~\pageref{s:Oo} & useful functions on objects \\
"Stack" & p.~\pageref{s:Stack} & last-in first-out stacks \\
"Queue" & p.~\pageref{s:Queue} & first-in first-out queues \\
"Weak" & p.~\pageref{s:Weak} & references that don't prevent objects from being garbage-collected \\
\end{tabular}
\subsubsection{Input/output:}
\begin{tabular}{lll}
"Format" & p.~\pageref{s:Format} & pretty printing \\
"Printf" & p.~\pageref{s:Printf} & formatting printing functions \\
"Digest" & p.~\pageref{s:Digest} & MD5 message digest \\
\end{tabular}
\subsubsection{Parsing:}
\begin{tabular}{lll}
"Genlex" & p.~\pageref{s:Genlex} & a generic lexer over streams \\
"Lexing" & p.~\pageref{s:Lexing} & the run-time library for lexers generated by "camllex" \\
"Parsing" & p.~\pageref{s:Parsing} & the run-time library for parsers generated by "camlyacc" \\
"Stream" & p.~\pageref{s:Stream} & basic functions over streams \\
\end{tabular}
\subsubsection{System interface:}
\begin{tabular}{lll}
"Arg" & p.~\pageref{s:Arg} & parsing of command line arguments \\
"Filename" & p.~\pageref{s:Filename} & operations on file names \\
"Gc" & p.~\pageref{s:Gc} & memory management control and statistics \\
"Printexc" & p.~\pageref{s:Printexc} & a catch-all exception handler \\
"Sys" & p.~\pageref{s:Sys} & system interface \\
\end{tabular}
\end{latexonly}

\begin{library}
\input arg.tex
\input array.tex
\input char.tex
\input digest.tex
\input filename.tex
\input format.tex
\input gc.tex
\input genlex.tex
\input hashtbl.tex
\input lexing.tex
\input list.tex
\input map.tex
\input oo.tex
\input parsing.tex
\input printexc.tex
\input printf.tex
\input queue.tex
\input random.tex
\input set.tex
\input sort.tex
\input stack.tex
\input stream.tex
\input string.tex
\input sys.tex
\input weak.tex
\end{library}
